{
  "source": {
    "include": ["src/"], // 表示 JSDOC 需要扫描哪些文件
    "exclude": ["src/less", "src/assets", "src/lib"] // 表示 JSDOC 需要排除哪些文件
  },
  "opts": {
    "template": "node_modules/docdash", // 生成文档的模板，默认是 templates/default
    "encoding": "utf8", // 读取文件的编码，默认是 utf8
    "destination": "./docs/", // 生成文档的路径，默认是 ./out/
    "recurse": true, // 运行时是否递归子目录
    "verbose": false // 运行时是否输出详细信息，默认是 false
  }
}

/**
 * @author 该类/方法的作者。
 * @class 表示这是一个类。
 * @function/@method 表示这是一个函数/方法(这是同义词)。
 * @private 表示该类/方法是私有的，JSDOC 不会为其生成文档。
 * @name 该类/方法的名字。
 * @description 该类/方法的描述。
 * @param 该类/方法的参数，可重复定义。
 * @return 该类/方法的返回类型。
 * @link 创建超链接，生成文档时可以为其链接到其他部分。
 * @example 创建例子。
 */

/**
 * @author Mondo
 * @description list 数据结构 转换成 树结构
 * @param {Array} data 需要转换的数据
 * @param {String} id 节点 id
 * @param {String} pid 父级节点 id
 * @param {String} child 子树为节点对象的某个属性值
 * @param {Object} labels 需要新增的字段名集合 { label: 'category_name' }
 * @return {Array}
 *
 * @example
 * formatListToTree({data: [{id:1}, {id: 2}, {id: 3, pid: 1}]})
 * =>
 * [ { id: 1, children: [ {id: 3, pid: 1} ] }, { id: 2 } ]
 */

/**
 * function formatListToTree({
 *   data = [],
 *   id = "id",
 *   pid = "pid",
 *   child = "children",
 *   labels = null
 * }) { ... }
 */
